\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"../storage\";\nimport { ResponseUtils } from \"../utils/response\";\n\nexport class UserController {\n  static async getUsers(req: any, res: any) {\n    try {\n      console.log(\"GET /api/users - Fetching users from database\");\n\n      const { search, role, page = 1, limit = 20 } = req.query;\n      console.log(\"Query params:\", { search, role, page, limit });\n\n      // Initialize demo users if they don't exist\n      await storage.initializeDemoUsers();\n\n      const filters: any = {};\n      if (search) filters.search = search as string;\n      if (role && role !== \"all\") filters.role = role as string;\n\n      console.log(\"Calling storage.getUsers with filters:\", filters);\n\n      // Use proper pagination and filtering from user storage\n      const result = await storage.getUsers(\n        parseInt(page as string) || 1,\n        parseInt(limit as string) || 20,\n        filters\n      );\n\n      console.log(\n        `Found ${result.data.length} users out of ${result.total} total:`,
        result.data.map((u) => ({ id: u.id, email: u.email, first_name: u.first_name, last_name: u.last_name })),\n      );\n\n      // Format users for compatibility\n      const formattedUsers = result.data.map(user => ({\n        ...user,\n        name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || user.username || user.email?.split('@')[0],\n        department: user.department_name || user.location || 'N/A',\n        status: user.is_active && !user.is_locked ? 'active' : 'inactive'\n      }));\n\n      res.json({\n        data: formattedUsers,\n        pagination: result,\n        total: result.total\n      });\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      ResponseUtils.internalServerError(res, \"Failed to fetch users\");\n    }\n  }\n\n  static async getUser(req: any, res: any) {\n    try {\n      console.log(\"GET /api/users/:id - Fetching user:\", req.params.id);\n      const user = await storage.getUserById(req.params.id);\n      if (!user) {\n        return ResponseUtils.notFound(res, \"User not found\");\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      ResponseUtils.internalServerError(res, \"Failed to fetch user\");\n    }\n  }\n\n  static async createUser(req: any, res: any) {\n    try {\n      console.log(\"POST /api/users - Creating user:\", req.body);\n      const { first_name, last_name, email, password, role, department, phone, job_title, location } = req.body;\n\n      if (!first_name || !email || !password) {\n        return res\n          .status(400)\n          .json({ message: \"First name, email, and password are required\" });\n      }\n\n      // Hash password\n      const password_hash = await bcrypt.hash(password, 10);\n\n      const userData = {\n        email: email.toLowerCase(),\n        username: email.toLowerCase(),\n        first_name: first_name || \"\",\n        last_name: last_name || \"\",\n        password_hash,\n        role: role || \"technician\",\n        phone: phone || \"\",\n        job_title: job_title || \"\",\n        location: location || \"\",\n        is_active: true\n      };\n\n      const newUser = await storage.createUser(userData);\n      console.log(\"Created user:\", newUser);\n      res.status(201).json(newUser);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      ResponseUtils.internalServerError(res, \"Failed to create user\");\n    }\n  }\n\n  static async updateUser(req: any, res: any) {\n    try {\n      console.log(\n        \"PUT /api/users/:id - Updating user:\",\n        req.params.id,\n        req.body,\n      );\n      const { first_name, last_name, email, password, role, department, phone, is_active, job_title, location } =\n        req.body;\n\n      const updates: any = {\n        first_name,\n        last_name,\n        email: email?.toLowerCase(),\n        role,\n        phone,\n        is_active,\n        job_title,\n        location\n      };\n\n      // Hash password if provided\n      if (password) {\n        updates.password_hash = await bcrypt.hash(password, 10);\n      }\n\n      // Remove undefined values\n      Object.keys(updates).forEach((key) => {\n        if (updates[key] === undefined) {\n          delete updates[key];\n        }\n      });\n\n      const updatedUser = await storage.updateUser(req.params.id, updates);\n      if (!updatedUser) {\n        return ResponseUtils.notFound(res, \"User not found\");\n      }\n\n      console.log(\"Updated user:\", updatedUser);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      ResponseUtils.internalServerError(res, \"Failed to update user\");\n    }\n  }\n\n  static async deleteUser(req: any, res: any) {\n    try {\n      console.log(\"DELETE /api/users/:id - Deleting user:\", req.params.id);\n      const success = await storage.deleteUser(req.params.id);\n      if (!success) {\n        return ResponseUtils.notFound(res, \"User not found\");\n      }\n      console.log(\"User deleted successfully\");\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      ResponseUtils.internalServerError(res, \"Failed to delete user\");\n    }\n  }\n\n  // Bulk user import from CSV\n  static async importUsers(req: any, res: any) {\n    try {\n      const { users } = req.body;\n\n      if (!Array.isArray(users) || users.length === 0) {\n        return res.status(400).json({ error: \"No users provided for import\" });\n      }\n\n      const importedUsers = await storage.bulkCreateUsers(users);\n\n      res.json({\n        message: `Successfully imported ${importedUsers.length} users`,\n        imported_count: importedUsers.length,\n        users: importedUsers\n      });\n    } catch (error) {\n      console.error(\"Error importing users:\", error);\n      res.status(500).json({ \n        error: \"Failed to import users\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  }\n}\n